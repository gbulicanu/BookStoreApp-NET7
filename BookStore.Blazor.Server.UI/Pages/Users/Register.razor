@page "/users/register"

@inject IClient httpClient
@inject NavigationManager navManager

<h3>Register New Account</h3>

@if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-danger">
            <p>@message</p>
        </div>
    }

<div class="card-body">
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Email" />
            <ValidationMessage For="@(() => RegistrationModel.Email)" />
        </div>
        <div class="form-group">
            <label for="email">First Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.FirstName" />
            <ValidationMessage For="@(() => RegistrationModel.FirstName)" />
        </div>
        <div class="form-group">
            <label for="email">Last Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.LastName" />
            <ValidationMessage For="@(() => RegistrationModel.LastName)" />
        </div>
        <div class="form-group">
            <label for="email">Password</label>
            <InputText class="form-control" type="password" @bind-Value="RegistrationModel.Password" />
            <ValidationMessage For="@(() => RegistrationModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary btn-block">Register</button>
    </EditForm>
</div>

@code {
    string message = string.Empty;
    UserDto RegistrationModel = new UserDto();
    private async Task HandleRegistration()
    {
        RegistrationModel.Role = "User";

        try
        {
            await httpClient.RegisterAsync(RegistrationModel);
            navManager.NavigateTo("/");
        }
        catch (ApiException apiException)
        {
            message = apiException.Message;
        }
    }
    }

